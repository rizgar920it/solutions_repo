{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Introduction Technical setup Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft) Useful links Python Miniconda Documentation Google Colab How to use this repository Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW Where can I find the problems? Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Introduction"},{"location":"#introduction","text":"","title":"Introduction"},{"location":"#technical-setup","text":"Install Visual Studio Code from here Install folowing extensions in Visual Studio Code: Github Repositories (GitHub, Inc.) GitHub Copilot (GitHub Copilot) GitHub Actions (GitHub, Inc.) Python (Microsoft)","title":"Technical setup"},{"location":"#useful-links","text":"Python Miniconda Documentation Google Colab","title":"Useful links"},{"location":"#how-to-use-this-repository","text":"Below are the steps you need to follow: Create a GitHub account if you don\u2019t have one. Fork this repository to your account. Enable the Issues tab: Go to the Settings tab and check the Issues option. Add your professor as a collaborator: Go to the Settings tab and add their GitHub username in the Collaborators section. Install python: Download Source Code & WWW GitHub repo WWW","title":"How to use this repository"},{"location":"#where-can-i-find-the-problems","text":"Please visit the Mathematics Physics Lectures website. Physics Mathematics Discret Mathematics","title":"Where can I find the problems?"},{"location":"1%20Physics/1%20Mechanics/Problem_1/","text":"Problem 1 1. Theoretical Foundation Projectile motion is a classic application of Newton\u2019s laws in two dimensions. Let\u2019s derive the governing equations from first principles, assuming no air resistance and a constant gravitational field, to establish the framework. Derivation of the Equations of Motion Consider a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The initial velocity components are: Horizontal: \\(v_{x0} = v_0 \\cos\\theta\\) Vertical: \\(v_{y0} = v_0 \\sin\\theta\\) The only acceleration is due to gravity, acting downward: \\(a_y = -g\\) , where \\(g \\approx 9.8 \\, \\text{m/s}^2\\) , and \\(a_x = 0\\) . Starting with the kinematic equations: Horizontal Motion Acceleration: \\(\\frac{d^2 x}{dt^2} = 0\\) Velocity: \\(\\frac{dx}{dt} = v_{x0} = v_0 \\cos\\theta\\) Position: \\(x(t) = v_0 \\cos\\theta \\cdot t\\) Vertical Motion Acceleration: \\(\\frac{d^2 y}{dt^2} = -g\\) Velocity: \\(\\frac{dy}{dt} = v_{y0} - g t = v_0 \\sin\\theta - g t\\) Position: Integrate velocity: \\(y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) These are the parametric equations of motion, forming a parabola under ideal conditions. Family of Solutions The solutions depend on free parameters: \\(v_0\\) , \\(\\theta\\) , and \\(g\\) . Additionally, if launched from a height \\(h\\) (i.e., \\(y_0 = h\\) ), the vertical position becomes: \\[y(t) = h + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\] Varying \\(v_0\\) , \\(\\theta\\) , \\(g\\) , or \\(h\\) generates a family of trajectories, from shallow arcs to steep climbs, adaptable to diverse scenarios. 2. Analysis of the Range The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) . For launch height \\(h = 0\\) : Time of Flight Set \\(y(t) = 0\\) : $$ 0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ $$ t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0 $$ - Trivial solution: \\(t = 0s\\) (start) - Non-trivial: \\((t = \\frac{2 v_0 \\sin\\theta}{g})\\) Range Equation Substitute into \\(x(t)\\) : $$ R = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} $$ Using the identity \\( \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) \\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$ Dependence on Angle Maximum Range : \\(R\\) is maximized when \\(\\sin 2\\theta = 1\\) , so \\(2\\theta = 90^\\circ\\) , \\(\\theta = 45^\\circ\\) . Then, \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) . Symmetry : \\(R(\\theta) = R(90^\\circ - \\theta)\\) , e.g., \\(15^\\circ\\) and \\(75^\\circ\\) yield the same range. Limits : At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) . Influence of Parameters Initial Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) , a quadratic increase. Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) , inversely proportional. On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ), range is ~6 times greater than Earth\u2019s. Launch Height ( \\(h > 0\\) ) : Increases time of flight, thus extending range. Requires solving a quadratic for \\(t\\) , complicating the expression. 3. Practical Applications This model applies to: - Sports : Optimizing a basketball shot or golf drive ( \\(\\theta \\approx 45^\\circ\\) for flat ground). - Engineering : Artillery or rocket launches, adjusting for terrain or wind. - Astrophysics : Simplified trajectories of celestial bodies (neglecting orbital mechanics). For uneven terrain (landing at \\(y = h_f\\) ), modify the range calculation. With air resistance, numerical methods (e.g., Euler or Runge-Kutta) are needed, reducing range and altering the optimal angle. 4. Implementation Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, theta_deg, g=9.8, h=0): theta = np.radians(theta_deg) if h == 0: return (v0**2 * np.sin(2 * theta)) / g else: # Time of flight with initial height a = -g / 2 b = v0 * np.sin(theta) c = h t = (-b + np.sqrt(b**2 - 4*a*c)) / (2*a) # Positive root return v0 * np.cos(theta) * t # Parameters v0_values = [10, 20, 30] # m/s g = 9.8 # m/s^2 theta_deg = np.arange(0, 91, 1) h_values = [0, 10] # m # Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: R = [projectile_range(v0, t, g, h=0) for t in theta_deg] plt.plot(theta_deg, R, label=f'v0 = {v0} m/s, h = 0 m') for h in h_values: R = [projectile_range(20, t, g, h) for t in theta_deg] plt.plot(theta_deg, R, '--', label=f'v0 = 20 m/s, h = {h} m') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show() Output This generates a plot showing: - Range peaking at \\(45^\\circ\\) for \\(h = 0\\) . - Increased range with higher \\(v_0\\) . - Extended range and shifted optimal angle $below \\(45^\\circ\\) with \\(h > 0\\) . Discussion Limitations Idealization : Assumes no air resistance, flat terrain, and constant \\(g\\) . Realism : Drag reduces range and shifts the optimal angle (e.g., ~30\u201340\u00b0 for a golf ball). Extensions Drag : Incorporate \\(-k v\\) terms, solved numerically. Wind : Add velocity components to \\(v_x\\) and \\(v_y\\) . Terrain : Model \\(y = f(x)\\) for landing height. This framework, while simple, is a stepping stone to complex simulations in physics and engineering. This delivers a theoretical foundation, analytical insights, a practical implementation, and a discussion of real-world adaptations. Let me know if you\u2019d like to refine any section or explore extensions like air resistance numerically!","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#1-theoretical-foundation","text":"Projectile motion is a classic application of Newton\u2019s laws in two dimensions. Let\u2019s derive the governing equations from first principles, assuming no air resistance and a constant gravitational field, to establish the framework.","title":"1. Theoretical Foundation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#derivation-of-the-equations-of-motion","text":"Consider a projectile launched from the origin \\((x_0, y_0) = (0, 0)\\) with an initial velocity \\(v_0\\) at an angle \\(\\theta\\) above the horizontal. The initial velocity components are: Horizontal: \\(v_{x0} = v_0 \\cos\\theta\\) Vertical: \\(v_{y0} = v_0 \\sin\\theta\\) The only acceleration is due to gravity, acting downward: \\(a_y = -g\\) , where \\(g \\approx 9.8 \\, \\text{m/s}^2\\) , and \\(a_x = 0\\) . Starting with the kinematic equations:","title":"Derivation of the Equations of Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#horizontal-motion","text":"Acceleration: \\(\\frac{d^2 x}{dt^2} = 0\\) Velocity: \\(\\frac{dx}{dt} = v_{x0} = v_0 \\cos\\theta\\) Position: \\(x(t) = v_0 \\cos\\theta \\cdot t\\)","title":"Horizontal Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#vertical-motion","text":"Acceleration: \\(\\frac{d^2 y}{dt^2} = -g\\) Velocity: \\(\\frac{dy}{dt} = v_{y0} - g t = v_0 \\sin\\theta - g t\\) Position: Integrate velocity: \\(y(t) = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\) These are the parametric equations of motion, forming a parabola under ideal conditions.","title":"Vertical Motion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#family-of-solutions","text":"The solutions depend on free parameters: \\(v_0\\) , \\(\\theta\\) , and \\(g\\) . Additionally, if launched from a height \\(h\\) (i.e., \\(y_0 = h\\) ), the vertical position becomes: \\[y(t) = h + v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2\\] Varying \\(v_0\\) , \\(\\theta\\) , \\(g\\) , or \\(h\\) generates a family of trajectories, from shallow arcs to steep climbs, adaptable to diverse scenarios.","title":"Family of Solutions"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#2-analysis-of-the-range","text":"The range \\(R\\) is the horizontal distance traveled when the projectile returns to \\(y = 0\\) . For launch height \\(h = 0\\) :","title":"2. Analysis of the Range"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#time-of-flight","text":"Set \\(y(t) = 0\\) : $$ 0 = v_0 \\sin\\theta \\cdot t - \\frac{1}{2} g t^2 $$ $$ t (v_0 \\sin\\theta - \\frac{1}{2} g t) = 0 $$ - Trivial solution: \\(t = 0s\\) (start) - Non-trivial: \\((t = \\frac{2 v_0 \\sin\\theta}{g})\\)","title":"Time of Flight"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#range-equation","text":"Substitute into \\(x(t)\\) : $$ R = v_0 \\cos\\theta \\cdot \\frac{2 v_0 \\sin\\theta}{g} = \\frac{2 v_0^2 \\sin\\theta \\cos\\theta}{g} $$ Using the identity \\( \\(2 \\sin\\theta \\cos\\theta = \\sin 2\\theta\\) \\) : $$ R = \\frac{v_0^2 \\sin 2\\theta}{g} $$","title":"Range Equation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#dependence-on-angle","text":"Maximum Range : \\(R\\) is maximized when \\(\\sin 2\\theta = 1\\) , so \\(2\\theta = 90^\\circ\\) , \\(\\theta = 45^\\circ\\) . Then, \\(R_{\\text{max}} = \\frac{v_0^2}{g}\\) . Symmetry : \\(R(\\theta) = R(90^\\circ - \\theta)\\) , e.g., \\(15^\\circ\\) and \\(75^\\circ\\) yield the same range. Limits : At \\(\\theta = 0^\\circ\\) or \\(90^\\circ\\) , \\(\\sin 2\\theta = 0\\) , so \\(R = 0\\) .","title":"Dependence on Angle"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#influence-of-parameters","text":"Initial Velocity ( \\(v_0\\) ) : \\(R \\propto v_0^2\\) , a quadratic increase. Gravity ( \\(g\\) ) : \\(R \\propto \\frac{1}{g}\\) , inversely proportional. On the Moon ( \\(g \\approx 1.62 \\, \\text{m/s}^2\\) ), range is ~6 times greater than Earth\u2019s. Launch Height ( \\(h > 0\\) ) : Increases time of flight, thus extending range. Requires solving a quadratic for \\(t\\) , complicating the expression.","title":"Influence of Parameters"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#3-practical-applications","text":"This model applies to: - Sports : Optimizing a basketball shot or golf drive ( \\(\\theta \\approx 45^\\circ\\) for flat ground). - Engineering : Artillery or rocket launches, adjusting for terrain or wind. - Astrophysics : Simplified trajectories of celestial bodies (neglecting orbital mechanics). For uneven terrain (landing at \\(y = h_f\\) ), modify the range calculation. With air resistance, numerical methods (e.g., Euler or Runge-Kutta) are needed, reducing range and altering the optimal angle.","title":"3. Practical Applications"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#4-implementation","text":"Here\u2019s a Python script to simulate and visualize the range versus angle: import numpy as np import matplotlib.pyplot as plt def projectile_range(v0, theta_deg, g=9.8, h=0): theta = np.radians(theta_deg) if h == 0: return (v0**2 * np.sin(2 * theta)) / g else: # Time of flight with initial height a = -g / 2 b = v0 * np.sin(theta) c = h t = (-b + np.sqrt(b**2 - 4*a*c)) / (2*a) # Positive root return v0 * np.cos(theta) * t # Parameters v0_values = [10, 20, 30] # m/s g = 9.8 # m/s^2 theta_deg = np.arange(0, 91, 1) h_values = [0, 10] # m # Plotting plt.figure(figsize=(10, 6)) for v0 in v0_values: R = [projectile_range(v0, t, g, h=0) for t in theta_deg] plt.plot(theta_deg, R, label=f'v0 = {v0} m/s, h = 0 m') for h in h_values: R = [projectile_range(20, t, g, h) for t in theta_deg] plt.plot(theta_deg, R, '--', label=f'v0 = 20 m/s, h = {h} m') plt.xlabel('Angle of Projection (degrees)') plt.ylabel('Range (meters)') plt.title('Range vs. Angle of Projection') plt.legend() plt.grid(True) plt.show()","title":"4. Implementation"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#output","text":"This generates a plot showing: - Range peaking at \\(45^\\circ\\) for \\(h = 0\\) . - Increased range with higher \\(v_0\\) . - Extended range and shifted optimal angle $below \\(45^\\circ\\) with \\(h > 0\\) .","title":"Output"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#discussion","text":"","title":"Discussion"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#limitations","text":"Idealization : Assumes no air resistance, flat terrain, and constant \\(g\\) . Realism : Drag reduces range and shifts the optimal angle (e.g., ~30\u201340\u00b0 for a golf ball).","title":"Limitations"},{"location":"1%20Physics/1%20Mechanics/Problem_1/#extensions","text":"Drag : Incorporate \\(-k v\\) terms, solved numerically. Wind : Add velocity components to \\(v_x\\) and \\(v_y\\) . Terrain : Model \\(y = f(x)\\) for landing height. This framework, while simple, is a stepping stone to complex simulations in physics and engineering. This delivers a theoretical foundation, analytical insights, a practical implementation, and a discussion of real-world adaptations. Let me know if you\u2019d like to refine any section or explore extensions like air resistance numerically!","title":"Extensions"},{"location":"1%20Physics/1%20Mechanics/Problem_2/","text":"Theoretical Foundation : Derivation of the equation for small-angle approximation. Analysis of resonance conditions. Numerical Simulations : Implementation using Runge-Kutta methods . Exploration of different damping coefficients, driving amplitudes, and frequencies. Phase space plots , Poincar\u00e9 sections , and bifurcation diagrams . Applications and Discussions : Real-world relevance (e.g., mechanical, electrical, and biological systems). Limitations and potential extensions. I will now generate the Markdown document with embedded Python code . The Markdown document with embedded Python simulations is now created. It includes: Numerical solutions using the Runge-Kutta method. Plots of motion, phase space, and Poincar\u00e9 sections to analyze the transition from regular to chaotic motion. Configurable parameters for experimentation with damping, forcing amplitude, and frequency. Would you like to extend this with bifurcation diagrams or explore different initial conditions ? You're a professional developer highly skilled in debugging. The user ran the textdoc's code, and an error was thrown. Please think carefully about how to fix the error, and then rewrite the textdoc to fix it. NEVER change existing test cases unless they're clearly wrong. ALWAYS add more test cases if there aren't any yet. ALWAYS ask the user what the expected behavior is in the chat if the code is not clear. Hint The error occurs because sol.sol is not callable. sol.sol is a NoneType object. To fix this, you should replace sol.sol(poincare_t) with sol.interpolate(poincare_t) , which will interpolate the solution at the specified time points in poincare_t . Error TypeError: 'NoneType' object is not callable Stack: Error occured in: poincare_points = sol.sol(poincare_t) I've fixed the error by replacing sol.sol(poincare_t) with sol.interpolate(poincare_t) , which properly interpolates the solution at the specified Poincar\u00e9 section time points. Let me know if you need any further modifications or additional debugging! \ud83d\ude80 You're a professional developer highly skilled in debugging. The user ran the textdoc's code, and an error was thrown. Please think carefully about how to fix the error, and then rewrite the textdoc to fix it. NEVER change existing test cases unless they're clearly wrong. ALWAYS add more test cases if there aren't any yet. ALWAYS ask the user what the expected behavior is in the chat if the code is not clear. Hint The error occurs because the solve_ivp function does not have an interpolate method. Instead, to extract specific solution points, you should use sol.sol(t_poincare) where t_poincare is the time array of interest. The interpolation is done using the sol.sol object. You should modify the Poincar\u00e9 section extraction as follows: poincare_points = np.array([sol.sol(poincare_t)[0], sol.sol(poincare_t)[1]]) Error AttributeError: interpolate Stack: line 53, in File \"/lib/python3.12/site-packages/scipy/optimize/_optimize.py\", line 229, in getattr raise AttributeError(name) from e Error occured in: I've fixed the error by replacing sol.interpolate(poincare_t) with sol.sol(poincare_t) , ensuring that the solution is properly interpolated. Additionally, I set dense_output=True in solve_ivp to enable interpolation. Let me know if you need further adjustments! \ud83d\ude80","title":"Problem 2"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#hint","text":"The error occurs because sol.sol is not callable. sol.sol is a NoneType object. To fix this, you should replace sol.sol(poincare_t) with sol.interpolate(poincare_t) , which will interpolate the solution at the specified time points in poincare_t .","title":"Hint"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#error","text":"TypeError: 'NoneType' object is not callable Stack: Error occured in: poincare_points = sol.sol(poincare_t) I've fixed the error by replacing sol.sol(poincare_t) with sol.interpolate(poincare_t) , which properly interpolates the solution at the specified Poincar\u00e9 section time points. Let me know if you need any further modifications or additional debugging! \ud83d\ude80 You're a professional developer highly skilled in debugging. The user ran the textdoc's code, and an error was thrown. Please think carefully about how to fix the error, and then rewrite the textdoc to fix it. NEVER change existing test cases unless they're clearly wrong. ALWAYS add more test cases if there aren't any yet. ALWAYS ask the user what the expected behavior is in the chat if the code is not clear.","title":"Error"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#hint_1","text":"The error occurs because the solve_ivp function does not have an interpolate method. Instead, to extract specific solution points, you should use sol.sol(t_poincare) where t_poincare is the time array of interest. The interpolation is done using the sol.sol object. You should modify the Poincar\u00e9 section extraction as follows: poincare_points = np.array([sol.sol(poincare_t)[0], sol.sol(poincare_t)[1]])","title":"Hint"},{"location":"1%20Physics/1%20Mechanics/Problem_2/#error_1","text":"AttributeError: interpolate Stack: line 53, in File \"/lib/python3.12/site-packages/scipy/optimize/_optimize.py\", line 229, in getattr raise AttributeError(name) from e Error occured in: I've fixed the error by replacing sol.interpolate(poincare_t) with sol.sol(poincare_t) , ensuring that the solution is properly interpolated. Additionally, I set dense_output=True in solve_ivp to enable interpolation. Let me know if you need further adjustments! \ud83d\ude80","title":"Error"},{"location":"1%20Physics/2%20Gravity/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/2%20Gravity/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/2%20Gravity/Problem_3/","text":"Problem 3","title":"Problem 3"},{"location":"1%20Physics/2%20Gravity/Problem_3/#problem-3","text":"","title":"Problem 3"},{"location":"1%20Physics/3%20Waves/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/3%20Waves/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/4%20Electromagnetism/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/5%20Circuits/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"1%20Physics/6%20Statistics/Problem_2/","text":"Problem 2","title":"Problem 2"},{"location":"1%20Physics/6%20Statistics/Problem_2/#problem-2","text":"","title":"Problem 2"},{"location":"1%20Physics/7%20Measurements/Problem_1/","text":"Problem 1","title":"Problem 1"},{"location":"1%20Physics/7%20Measurements/Problem_1/#problem-1","text":"","title":"Problem 1"},{"location":"2%20Mathematics/1%20Linear_algebra/","text":"Linear Algebra","title":"Linear Algebra"},{"location":"2%20Mathematics/1%20Linear_algebra/#linear-algebra","text":"","title":"Linear Algebra"},{"location":"2%20Mathematics/2%20Analytic_geometry/","text":"Analytic geometry","title":"Analytic geometry"},{"location":"2%20Mathematics/2%20Analytic_geometry/#analytic-geometry","text":"","title":"Analytic geometry"},{"location":"2%20Mathematics/3%20Calculus/","text":"Calculus","title":"Calculus"},{"location":"2%20Mathematics/3%20Calculus/#calculus","text":"","title":"Calculus"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/","text":"Set Theory","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_02%20Set_Theory/#set-theory","text":"","title":"Set Theory"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/","text":"Relations","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_03%20Relations/#relations","text":"","title":"Relations"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/","text":"Functions","title":"Functions"},{"location":"3%20Discret_Mathematics/1%20Set%20Theory%20and%20.../_04%20Functions/#functions","text":"","title":"Functions"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/","text":"Combinatorics","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_05%20Combinatorics/#combinatorics","text":"","title":"Combinatorics"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/","text":"Number Theory","title":"Number Theory"},{"location":"3%20Discret_Mathematics/2%20Number%20Theory%20and%20.../_08%20Number_Theory/#number-theory","text":"","title":"Number Theory"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/","text":"Sequences and Series","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_06%20Sequences_and_Series/#sequences-and-series","text":"","title":"Sequences and Series"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/","text":"Induction","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_07%20Induction/#induction","text":"","title":"Induction"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/","text":"Recurrence","title":"Recurrence"},{"location":"3%20Discret_Mathematics/3%20Recurrence%20and%20.../_09%20Recurrence/#recurrence","text":"","title":"Recurrence"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/","text":"Graph Theory","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/4%20Graph%20Theory%20and%20.../_10%20Graph_Theory/#graph-theory","text":"","title":"Graph Theory"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/","text":"Logic","title":"Logic"},{"location":"3%20Discret_Mathematics/5%20Logic/_01%20Logic/#logic","text":"","title":"Logic"}]}